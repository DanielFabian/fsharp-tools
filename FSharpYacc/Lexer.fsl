{
(*
Copyright (c) 2012-2013, Jack Pappas
All rights reserved.

This code is provided under the terms of the 2-clause ("Simplified") BSD license.
See LICENSE.TXT for licensing details.
*)

//
module internal FSharpYacc.Lexer

(* NOTE :   The code below is adapted from the 'fsyacc' grammar, which is
            (c) Microsoft Corporation 2005-2008 and covered under the
            Apache 2.0 license. *)

open System.Text
open Microsoft.FSharp.Text.Lexing
open FSharpYacc.Ast
open FSharpYacc.Parser

let lexeme (lexbuf : LexBuffer<char>) =
    System.String (lexbuf.Lexeme)
let newline (lexbuf : LexBuffer<_>) =
    lexbuf.EndPos <- lexbuf.EndPos.NextLine

let unexpected_char lexbuf =
    let msg = sprintf "Unexpected character '%s'" (lexeme lexbuf)
    raise <| exn msg

let typeDepth = ref 0
let startPos = ref Position.Empty
let mutable str_buf = System.Text.StringBuilder ()

let appendBuf (str : string) =
    str_buf.Append str
    |> ignore

let clearBuf () =
    str_buf <- System.Text.StringBuilder ()

} 

let letter = ['A'-'Z'] | ['a'-'z']
let digit = ['0'-'9']
let whitespace = [' ' '\t']
let newline = ('\n' | '\r' '\n')
let ident_start_char = letter
let ident_char = (ident_start_char| digit | ['\'' '_'])
let ident = ident_start_char ident_char*

rule token = parse
    | "%{" {
        let p = lexbuf.StartPos
        header p (StringBuilder 100) lexbuf }
    | "%%" { PERCENT_PERCENT }
    | "%token" (whitespace* '<') {
        typeDepth := 1
        startPos := lexbuf.StartPos
        clearBuf ()
        TOKEN (fs_type lexbuf) }
    | "%token" { TOKEN None }
    | "%start"{ START }
    | "%prec"{ PREC }
    | "%type" (whitespace* '<') {
        typeDepth := 1
        startPos := lexbuf.StartPos
        clearBuf ()
        match fs_type lexbuf with
        | Some x ->
            TYPE x
        | None ->
            failwith "gettype" }
    | "%left" { LEFT }
    | "%right" { RIGHT }
    | "%nonassoc" { NONASSOC }
    | "error" { ERROR }
    | '<' { LESS }
    | '>' { GREATER }
    | ';' { SEMI }
    | '{' {
        let p = lexbuf.StartPos
        let buff = StringBuilder 100
        // adjust the first line to get even indentation for all lines w.r.t. the left hand margin
        buff.Append (String.replicate (lexbuf.StartPos.Column + 1) " ") |> ignore
        code p buff lexbuf }
    | whitespace+ {
        token lexbuf }
    | newline {
        newline lexbuf
        token lexbuf }
    | ident_start_char ident_char* {
        IDENT (lexeme lexbuf) }
    | '|' { BAR }
    | "/*" {
        ignore (comment lexbuf)
        token lexbuf }
    | "//" [^'\n''\r']* { token lexbuf }
    | ':' { COLON }
    | _ { unexpected_char lexbuf }
    | eof { EOF }

and fs_type = parse
    | '<' {
        incr typeDepth
        appendBuf (lexeme lexbuf)
        fs_type lexbuf }

    (*  When '->' is used inside a %type declaration, it needs to be matched
        specially, otherwise it'll be caught by the '>' pattern. *)
    | "->" {
        appendBuf (lexeme lexbuf)
        fs_type lexbuf }

    | '>' {
        decr typeDepth
        if !typeDepth = 0 then
            Some <| string str_buf
        else
            appendBuf (lexeme lexbuf)
            fs_type lexbuf }
    | _ {
        appendBuf (lexeme lexbuf)
        fs_type lexbuf } 

and header p buff = parse
    | "%}" {
        //HEADER (buff.ToString(), p)
        HEADER (Some <| buff.ToString()) }
    | newline {
        newline lexbuf
        ignore <| buff.Append System.Environment.NewLine
        header p buff lexbuf }
    | (whitespace | letter | digit)+ {
        ignore <| buff.Append (lexeme lexbuf)
        header p buff lexbuf }
    | "//" [^'\n''\r']* {
        ignore <| buff.Append (lexeme lexbuf)
        header p buff lexbuf }
    | "'\"'" | "'\\\"'" {
        ignore <| buff.Append (lexeme lexbuf)
        header p buff lexbuf }
    | "\"" {
        ignore <| buff.Append (lexeme lexbuf)
        ignore(codestring buff lexbuf)
        header p buff lexbuf }
    | eof { EOF }
    | _ {
        ignore <| buff.Append(lexeme lexbuf).[0]
        header p buff lexbuf }

and code p buff = parse
    | "}" {
        //CODE (buff.ToString(), p)
        CODE (Some <| buff.ToString())
        }
    | "{" {
        ignore <| buff.Append (lexeme lexbuf)
        ignore (code p buff lexbuf)
        ignore <| buff.Append "}"
        code p buff lexbuf }
    | newline {
        newline lexbuf
        ignore <| buff.Append System.Environment.NewLine
        code p buff lexbuf }
    | "'\"'" | "'\\\"'" {
        ignore <| buff.Append (lexeme lexbuf)
        code p buff lexbuf }
    | "\"" {
        ignore <| buff.Append (lexeme lexbuf)
        ignore (codestring buff lexbuf)
        code p buff lexbuf }
    | (whitespace | letter | digit)+ {
        ignore <| buff.Append (lexeme lexbuf)
        code p buff lexbuf }
    | "//" [^'\n''\r']* {
        ignore <| buff.Append (lexeme lexbuf)
        code p buff lexbuf }
    | eof { EOF }
    | _ {
        ignore <| buff.Append (lexeme lexbuf).[0]
        code p buff lexbuf }

and codestring buff = parse
    |  '\\' ('"' | '\\') {
        ignore <| buff.Append (lexeme lexbuf)
        codestring buff lexbuf }
    | '"' {
        ignore <| buff.Append (lexeme lexbuf)
        buff.ToString () }
    | newline {
        newline lexbuf
        ignore <| buff.Append System.Environment.NewLine
        codestring buff lexbuf }
    | (whitespace | letter | digit)+ {
        ignore <| buff.Append (lexeme lexbuf)
        codestring buff lexbuf }
    | eof {
        failwith "unterminated string in code" }
    | _ {
        ignore <| buff.Append(lexeme lexbuf).[0]
        codestring buff lexbuf }

and comment = parse
    | "/*" {
        ignore (comment lexbuf)
        comment lexbuf }
    | newline {
        newline lexbuf
        comment lexbuf }
    | "*/" { () }
    | eof {
        failwith "end of file in comment" }
    | [^ '/' '*' '\n' '\r' '"' '/' ]+ {
        comment lexbuf }
    | _  {
        comment lexbuf }

